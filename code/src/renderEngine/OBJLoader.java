package renderEngine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import models.RawModel;

import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;



/*
 This class loads the.obj files to our game and return it as a model. 
 */
public class OBJLoader {
	
	
	
	
	
  //This method takes in the file name , loader and return the model...............................
	public static RawModel loadObjModel(String fileName, Loader loader) {
		FileReader fr = null;                                      // create a new file reader..........................................
		try {                                                              //check if file is present........................
			fr = new FileReader(new File("res/" + fileName + ".obj"));            // load the file by passing the location of the file......................
		} catch (FileNotFoundException e) {
			System.err.println("Couldn't load file!");                                // print exception if file  not found....................
			e.printStackTrace();
		}
	
		
		
		
		BufferedReader reader = new BufferedReader(fr);                          // buffered reader allows us to read from the file.................
		String line;                                                             // read each line of the file....................
		List<Vector3f> vertices = new ArrayList<Vector3f>();                  // list of 3d vector vertices.................................
		List<Vector2f> textures = new ArrayList<Vector2f>();                     // list of 2d vectors for textures...................
		List<Vector3f> normals = new ArrayList<Vector3f>();                        // list of 3d vectors for normal vectors.......................
		List<Integer> indices = new ArrayList<Integer>();                         // list of integer indices...............................
		float[] verticesArray = null;                                           // arrays to store the float values....................                                                    
		float[] normalsArray = null; 
		float[] textureArray = null;
		int[] indicesArray = null;
		
		try {                                                                    // catch any exception of file format.........................

			while (true) {                                                      // read until we break out..............................
				line = reader.readLine();
				String[] currentLine = line.split(" ");                           /// split each line at spaces................................
				if (line.startsWith("v ")) {                                                      // check if it is a vertex........................
					Vector3f vertex = new Vector3f(Float.parseFloat(currentLine[1]),                     // create a new vector 3f and pass it with the 
							Float.parseFloat(currentLine[2]), Float.parseFloat(currentLine[3]));          // data from the split data..................
					vertices.add(vertex);
				} else if (line.startsWith("vt ")) {                                                // check if it is a texture coordinate.............
					Vector2f texture = new Vector2f(Float.parseFloat(currentLine[1]),                    // create a new vector 2f and pass it with the
							Float.parseFloat(currentLine[2]));                                             // data from the split data.................
					textures.add(texture);
				} else if (line.startsWith("vn ")) {                                                           // check if it is a normal..................
					Vector3f normal = new Vector3f(Float.parseFloat(currentLine[1]),                               // create a new vector 2f and pass it with the
							Float.parseFloat(currentLine[2]), Float.parseFloat(currentLine[3]));                   // data from the split data.................
					normals.add(normal);
				} else if (line.startsWith("f ")) {                                                                // check if it is a face...................
					
					//Once we have moved into it that means that we have completed reading all the above data and we can create vertices float................
					textureArray = new float[vertices.size() * 2];                                               // set the size of the array of vertices.........
					normalsArray = new float[vertices.size() * 3];                                               // set the size of the normals of vertices......
					break;
				}
			}

			while (line != null) {                                                                  // this loops through the faces...................... 
				if (!line.startsWith("f ")) {                                                       // if line is face then read it or else continue.............
					line = reader.readLine();                                                       // read line......
					continue;
				}
				String[] currentLine = line.split(" ");                                           // split line with spaces
				String[] vertex1 = currentLine[1].split("/");
				String[] vertex2 = currentLine[2].split("/");                                           // split lines with the / s...................
				String[] vertex3 = currentLine[3].split("/");
				
				processVertex(vertex1,indices,textures,normals,textureArray,normalsArray);            //call process vertex1 and pass parameters...........
				processVertex(vertex2,indices,textures,normals,textureArray,normalsArray);            //call process vertex1 and pass parameters...........
				processVertex(vertex3,indices,textures,normals,textureArray,normalsArray);             //call process vertex1 and pass parameters...........
				line = reader.readLine();                                                                         // read next line...............
			}
			reader.close();                                                                            // close the reader........................

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		verticesArray = new float[vertices.size()*3];                                    // initialise vertices array......................
		indicesArray = new int[indices.size()];
		
		int vertexPointer = 0;
		
		// copy our vertices data in our vertices array.......................................
		for(Vector3f vertex:vertices){
			verticesArray[vertexPointer++] = vertex.x;                  // x component..............................
			verticesArray[vertexPointer++] = vertex.y;                   // y component..............................
			verticesArray[vertexPointer++] = vertex.z;                    // z component..............................
		}
		
		// copy our indices data from indices list to indices array........................................
		for(int i=0;i<indices.size();i++){ 
			indicesArray[i] = indices.get(i);                                 // copyt the data.....................................                                   
		}
		return loader.loadToVAO(verticesArray, textureArray, normalsArray, indicesArray);      // return the arrays of vertices,textures, normals and indices.......

	}
	
	
	
    // method to process the string which take string, indices, textures, normals and normal array, texture array...............................
	private static void processVertex(String[] vertexData, List<Integer> indices,
			List<Vector2f> textures, List<Vector3f> normals, float[] textureArray,
			float[] normalsArray) {
		
		
		int currentVertexPointer = Integer.parseInt(vertexData[0]) - 1;                // take the integer at the index 0 of vertex data..................
		indices.add(currentVertexPointer);                                             // add the pointer to our indices array.............
		Vector2f currentTex = textures.get(Integer.parseInt(vertexData[1])-1);         // take the integer at the index 1 of vertex data..................
		textureArray[currentVertexPointer*2] = currentTex.x;                           // add the pointer to our texture array.............
		textureArray[currentVertexPointer*2+1] = 1 - currentTex.y;                       // for y position...........
		//we did 1 - because opengl start from top left and open gl start from bottom left
		
		Vector3f currentNorm = normals.get(Integer.parseInt(vertexData[2])-1);                    // take the integer at the index 1 of vertex data..................
		normalsArray[currentVertexPointer*3] = currentNorm.x;                                     // add the pointer to our vertices array............
		normalsArray[currentVertexPointer*3+1] = currentNorm.y;
		normalsArray[currentVertexPointer*3+2] = currentNorm.z;	
	}

}
