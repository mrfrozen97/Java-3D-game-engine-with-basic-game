package renderEngine;

/*
This class renders the model from the vao to the screen................. 


*/
import java.util.List;
import java.util.Map;

import models.RawModel;
import models.TexturedModel;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Matrix4f;

import shaders.StaticShader;
import textures.ModelTexture;
import toolbox.Maths;
import entities.Entity;

public class EntityRenderer {

	
	private StaticShader shader;                                 // create a class attribute of static shader.............................

	
	// This is the constructor of the entity renderer which takes in shader and projection matrix........................
	public EntityRenderer(StaticShader shader,Matrix4f projectionMatrix) {
		this.shader = shader;                                // assign the shader to the shader variable....................................
		shader.start();                                         //  start the shader..........................
		shader.loadProjectionMatrix(projectionMatrix);               // load projection matrix to the shader........................
		shader.stop();                                               // stop the shader once we have loaded the matrix..................................
	}

	
	
	
	
	
	
	// This method renders the model . It takes in the rawmodel properties(id).............................
	public void render(Map<TexturedModel, List<Entity>> entities) {                          //takes in the hash map of models and list of entities...................
		for (TexturedModel model : entities.keySet()) {                                   // loop through all keys in hash map..................               
			prepareTexturedModel(model);                                                 // call prepare textured model.............................
			List<Entity> batch = entities.get(model);                                    // getting all the entities that use the model....................
			for (Entity entity : batch) {                                                // loop through entities.....................
				prepareInstance(entity);                                                  
				GL11.glDrawElements(GL11.GL_TRIANGLES, model.getRawModel().getVertexCount(),
						GL11.GL_UNSIGNED_INT, 0);
				//Method to render the vao to the  screen. It takes in type(triangles) , length, type(indices buffer), index to start...............
			}
			unbindTexturedModel();                                                   //unbind model after rendering..............................
		}
	}

	
	
	
	
	
	
	
	//Method to prepare our textured models.......................................
	private void prepareTexturedModel(TexturedModel model) {                          // takes in model.............................
		RawModel rawModel = model.getRawModel();                                      // create object of raw model....................
		GL30.glBindVertexArray(rawModel.getVaoID());                                      // bind the model........................
		GL20.glEnableVertexAttribArray(0);                                                // enable the vertex in the vao..............
		GL20.glEnableVertexAttribArray(1);                                               // enable the textures in the vao...............
		GL20.glEnableVertexAttribArray(2);                                             // enable the normals in the vao............... 
		ModelTexture texture = model.getTexture();                                     // create a object of model texture...............
		shader.loadNumberOfRows(texture.getNumberOfRows());                             //get the size of textures and load it to shaders..............
		if(texture.isHasTransparency() || model.isIfCalling()) {                                               // disable culling if we are going to use transparency for a model.......
			
			MasterRenderer.disableCulling();                                                   //disable culling...................                                              
			
		}
		shader.loadFakeLightingVariable(texture.isUseFakeLighting());                                           // load fake lighting to the shader...........                  
		shader.loadShineVariables(texture.getShineDamper(), texture.getReflectivity());                          //load the two shine variables to the shader.......
		GL13.glActiveTexture(GL13.GL_TEXTURE0);                                                               // activate the texture.................
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, model.getTexture().getID());                               // bind textures........................
	}

	
	
	
	
	
	
	//Method to unbind the texture model.....................
	private void unbindTexturedModel() {
		MasterRenderer.enableCulling();                          // enable culing. set this default value again...................
		GL20.glDisableVertexAttribArray(0);                      // disble vertex of vao......................
		GL20.glDisableVertexAttribArray(1);                       // disble texture of vao.....................
		GL20.glDisableVertexAttribArray(2);                        // disble normal of vao.....................
		GL30.glBindVertexArray(0);                                   // unbind the vao........................
	}

	
	
	
	
	
	
	
	//This method creates a new matrix4f and loads the values into the transformation matrix
    //Using the method we added in the maths class..............................
	private void prepareInstance(Entity entity) {
		
		
		Matrix4f transformationMatrix = Maths.createTransformationMatrix(entity.getPosition(),
				entity.getRotX(), entity.getRotY(), entity.getRotZ(), entity.getScale());              //creates the transformation matrix
		
		 
		shader.loadTransformationMatrix(transformationMatrix);                                   // loads the transformation matrix into the shader.....
		shader.loadOffset(entity.getTextureXOffset(), entity.getTextureYOffset());                    
	}

}
