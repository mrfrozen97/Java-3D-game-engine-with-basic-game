#version 400 core

in vec2 pass_textureCoordinates;                                // Input the texture coordinates...................
in vec3 surfaceNormal;                                          //Input the surface normal..................
in vec3 toLightVector[4];                                       // Input directions of light.....................
in vec3 toCameraVector;                                          // Input directions of camera.....................
in float visibility;                                            // Input the visibility of the objects.....................

out vec4 out_Colour;

uniform sampler2D modelTexture;
uniform vec3 lightColour[4];                                  // loads the array of colors of the light...........
uniform vec3 attenuation[4];                                   // loads the array of attenuations of the light...........
uniform float shineDamper;                                     // load the shine damper value.................
uniform float reflectivity;                                    // load reflectivity value..............
uniform vec3 skyColour;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);                           //convert normal to unit vector................
	vec3 unitVectorToCamera = normalize(toCameraVector);                 //convert camera to unit vector................
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0; i<4; i++){                                                                       // loop for 4 lights...................
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance* distance);
	vec3 unitLightVector = normalize(toLightVector[i]);                                                                // convert light vector to unit vector.....
	float nDotl = dot(unitNormal,unitLightVector);                                                     //dot product these two vectors and result is float......
	float brightness = max(nDotl,0.0);                                                               // eliminate negative values.......
	
	
	vec3 lightDirection = -unitLightVector;                                                           // light direction is -ve of direction of light source......
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);                              //this function gives us the reflected light............
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);                           //dot product these two vectors and result is float......
	specularFactor = max(specularFactor,0.0);                                                          // eliminate negative values.......
	float dampedFactor = pow(specularFactor,shineDamper);                                              // makes low specular factors even lower.......
	totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;                           
	}
	
	totalDiffuse - max(totalDiffuse,0.4);                                                 
	
	
	vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
	if(textureColour.a<0.5){                                                                         //if texture color is less than 0.5....
	      discard;                                                                                 // delete the transparent part...............
	}
	

	out_Colour =  vec4(totalDiffuse,1.0) * texture(modelTexture,pass_textureCoordinates) + vec4(totalSpecular,1.0);   
	        
	out_Colour = mix(vec4(skyColour,1.0),out_Colour,visibility);                                                         //calculate the color by comparing fog........

}