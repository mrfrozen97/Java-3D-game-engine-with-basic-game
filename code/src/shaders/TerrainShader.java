package shaders;

import java.util.List;

import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;

import toolbox.Maths;
import entities.Camera;
import entities.Light;

public class TerrainShader extends ShaderProgram{
	
	private static final int MAX_LIGHTS = 4;
	
	private static final String VERTEX_FILE = "src/shaders/terrainVertexShader.txt";                           //file path of vertex shader.................
	private static final String FRAGMENT_FILE = "src/shaders/terrainFragmentShader.txt";                      // file path of fragment shader................
	
	private int location_transformationMatrix;                                                // stores location of the transformation matrix...........
	private int location_projectionMatrix;                                                     // stores location of the projection matrix............
	private int location_viewMatrix;                                                          // stores location of the view matrix............
	private int location_lightPosition[];                                                     // stores the location positions of all the lights...........
	private int location_lightColour[];                                                       // stores the location color of all the lights............
	private int location_attenuation[];                                                         // stores the location attenuations of the light.............
	private int location_shineDamper;                                                             // stores the location shine damper of the light.............
	private int location_reflectivity;                                                           // stores the location reflectivity of the surface.............
	private int location_skyColour;                                                              // stores the location of sky color.............
	private int location_backgroundTexture;                                                      // stores the location of texture1.............
	private int location_rTexture;                                                                // stores the location of texture2.............
	private int location_gTexture;                                                                 // stores the location of texture3.............
	private int location_bTexture;                                                                 // stores the location of texture4.............
	private int location_blendMap;                                                                 // stores the location of blend map.............
	private int location_toShadowMapSpace;
	private int location_shadowMap;
	
	
	
	
	//Constructor calls the  constructor of shader program and pass path of shaders..........
	public TerrainShader() {
		super(VERTEX_FILE, FRAGMENT_FILE);
	}

	
	
	
	@Override
	protected void bindAttributes() {
		super.bindAttribute(0, "position");                                   //this binds attribute 0 of our VAO which is the positions of our models.............                       
		super.bindAttribute(1, "textureCoordinates");                        // this binds attribute 1 of vao that is texture in the vertex shader............
		super.bindAttribute(2, "normal");                                      // this binds attribute 2 of vao that is texture in the vertex shader............
	}

	
	
	
	
	
	
	
	//This methods gets all the locations of the uniform variables...........................................
	@Override
	protected void getAllUniformLocations() {
		location_transformationMatrix = super.getUniformLocation("transformationMatrix");              // get the location of transformation matrix.........
		location_projectionMatrix = super.getUniformLocation("projectionMatrix");                      // get the location of projection matrix.........
		location_viewMatrix = super.getUniformLocation("viewMatrix");                                  // get the location of view matrix.......
	/*	location_lightPosition = super.getUniformLocation("lightPosition"); 
		location_lightColour = super.getUniformLocation("lightColour"); */
		location_shineDamper = super.getUniformLocation("shineDamper");                                 // get the location of shine damper......
		location_reflectivity = super.getUniformLocation("reflectivity");                               // get the location of reflectivity......
		location_skyColour = super.getUniformLocation("skyColour");                                   // get the location of sky color......  
		location_backgroundTexture = super.getUniformLocation("backgroundTexture");                    // get the location of texture1......  
		location_rTexture = super.getUniformLocation("rTexture");                                     // get the location of texture2......  
		location_gTexture = super.getUniformLocation("gTexture");                                    // get the location of texture3......  
		location_bTexture = super.getUniformLocation("bTexture");                                     // get the location of texture4......  
		location_blendMap = super.getUniformLocation("blendMap");                                     // get the location of blend map......  
		location_toShadowMapSpace = super.getUniformLocation("toShadowMapSpace");
		location_shadowMap = super.getUniformLocation("shadowMap");
		
		
		//get the locations of light parameters that include positions, color and lights.........................................
		location_lightPosition = new int[MAX_LIGHTS];                                                // List of locations of positions..................
		location_lightColour = new int[MAX_LIGHTS];                                                  // List of locations of lights..................
		location_attenuation = new int[MAX_LIGHTS];                                                  // List of locations of attenuations..................
		for(int i=0; i<MAX_LIGHTS; i++) {
			location_lightPosition[i] = super.getUniformLocation("lightPosition["+i+"]");             // get and add locations of positions..............
			location_lightColour[i] = super.getUniformLocation("lightColour["+i+"]");                  // get and add locations of colors..............
			location_attenuation[i] = super.getUniformLocation("attenuation["+i+"]");                  // get and add locations of attenuations..............
		} 
	}
	
	
	
	
	//This method loads the ints to the shader program to tell shader which id has which location.................
	public void connectTextureUnits() {
		super.loadInt(location_backgroundTexture, 0);                           //connect unit 0 to our texture1.......
		super.loadInt(location_rTexture, 1);                                    //connect unit 1 to our texture2.......
		super.loadInt(location_gTexture, 2);                                    //connect unit 2 to our texture3.......
		super.loadInt(location_bTexture, 3);                                    //connect unit 3 to our texture4.......
		super.loadInt(location_blendMap, 4);                                    //connect unit 4 to our blendMap.......
	    super.loadInt(location_shadowMap, 5);
	}
	
	
	
	
	public void loadToShadowSpaceMatrix(Matrix4f matrix) {
		
		super.loadMatrix(location_toShadowMapSpace, matrix);
		
	}
	
	
	
	
	public void loadSkyColour(float r, float g, float b) {
		super.loadVector(location_skyColour, new Vector3f(r,g,b));
	}
	
	
	
	
	
	
	
	// pass values to shader program to load it to the shaders............
	public void loadShineVariables(float damper,float reflectivity){                         //takes in damper and reflectivity.............
		super.loadFloat(location_shineDamper, damper);                                       // load damper to shader............
		super.loadFloat(location_reflectivity, reflectivity);                                  // load reflectivity to shader..............
	}
	
	
	
	
	
	
	// This method loads the projection matrix to the location by calling method from parent class....................
	public void loadTransformationMatrix(Matrix4f matrix){
		super.loadMatrix(location_transformationMatrix, matrix);                           // load matrix by passing location and matrix..............
	}
	
	
	
	
	
	
	
	//This method is called from the master renderer class and it takes in lights array.................................................. 
	public void loadLight(List<Light> lights){
		/*super.loadVector(location_lightPosition, lights.getPosition());
		super.loadVector(location_lightColour, lights.getColour());
	*/
		
		/// loop upto size of max number of lights...........................................................
		for(int i=0; i<MAX_LIGHTS;i++) {
			if(i<lights.size()) {                                                                    //check if the size is less than lights array.............
				super.loadVector(location_lightPosition[i], lights.get(i).getPosition());              // add light positions to shader..................
				super.loadVector(location_lightColour[i], lights.get(i).getColour());                 // add light colors to shader..................
				super.loadVector(location_attenuation[i], lights.get(i).getAttenuation());              // add light attenuations to shader..................
				
				
			}
			else {
				super.loadVector(location_lightPosition[i], new Vector3f(0,0,0));                       // load empty position vector to shader..................
				super.loadVector(location_lightColour[i], new Vector3f(0,0,0));                         // load empty color vector to shader.................
				super.loadVector(location_attenuation[i], new Vector3f(1,0,0));                          // load empty attenuation vector to shader.................
				//we pass a 1 because we don't want to get a divide by zero exception........................
			}
			
		}
	}
	
	
	
	
	
	
	
	// This method loads the view matrix to the location by calling method from parent class....................
	public void loadViewMatrix(Camera camera){                                       // pass the camera object.................
		Matrix4f viewMatrix = Maths.createViewMatrix(camera);                          // create the view matrix from method in maths class............
		super.loadMatrix(location_viewMatrix, viewMatrix);                              // load this matrix................
	}
	
	
	
	
	
	
	// This method loads the transformation matrix to the location by calling method from parent class....................
	public void loadProjectionMatrix(Matrix4f projection){
		super.loadMatrix(location_projectionMatrix, projection);               // load matrix by passing location and matrix..............
	}
	

}
