#version 400 core

in vec3 position;                         // position of variable from the vao...................
in vec2 textureCoordinates;              // coordinates for textures........
in vec3 normal;                          // normal of the vertices.....................

out vec2 pass_textureCoordinates;                 //pass textures to fragment shader to be used.....................
out vec3 surfaceNormal;                           // pass the normal of surface to fragment shader......................  
out vec3 toLightVector[4];                         // pass the directions of light to fragment shader...................... 
out vec3 toCameraVector;                           // pass the direction of the camera to fragment shader..............
out float visibility;                              //pass visibility to fragment shader.........................

uniform mat4 transformationMatrix;                    //load the transformation matrix in vertex shader..........
uniform mat4 projectionMatrix;                         // loads the projection matrix in the vertex shader........
uniform mat4 viewMatrix;                                // loads the view matrix in the vertex shader........
uniform vec3 lightPosition[4];                           // loads the array of positions of the light............
uniform float useFakeLighting;                            //loads if we have to use fake lighting...............

uniform float numberOfRows;
uniform vec2 offset;

const float density = 0.0000;
const float gradient = 0.0001;



void main(void){

   

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);          // multiply the transformation matrix to the vertex position to get our each model....
	
	
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;                    
	gl_Position = projectionMatrix * viewMatrix * worldPosition;                  // new gl positions changed by view matrix and projection matrix.........                  
	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){                                                         //use fake lighting if it is greater than 0.5..............                     
	    actualNormal = vec3(0.0,1.0,0.0);                                             // set normal pointing directly up.................
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;       // calculate current normal by multiplying original normal to transformation matrix......
	
	for(int i=0; i<4; i++){                                                      // loop it for 4 lights...........................
	toLightVector[i] = lightPosition[i] - worldPosition.xyz;                   // change the effective light position by subtracting the original by world position.....
	}
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;          // calculate camera position relative to our current position......
	
	float distance = length(positionRelativeToCam.xyz);                                             // calculate distance from camera.........
	visibility = exp(-pow((distance*density),gradient));                                                //calculate the fading by fog............
	visibility = clamp(visibility,0.0,1.0);                                                          // map visibility between 0 and 1.............

	
}