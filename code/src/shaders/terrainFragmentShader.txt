#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

out vec4 out_Color;

uniform sampler2D backgroundTexture;                                         //get texture 1....................
uniform sampler2D rTexture;                                                  //get texture 2....................
uniform sampler2D gTexture;                                                  //get texture 3....................
uniform sampler2D bTexture;                                                  //get texture 4....................
uniform sampler2D blendMap;                                                  //get the blend map................
uniform sampler2D shadowMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;


const float adjustment = 1.1;
const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 +1.0) * (pcfCount * 2.0 + 1.0);


void main(void){

    float mapSize = 4096.0;
    float texelSize = 1.0/mapSize;
    float total =0.0;
    
    for(int x=-pcfCount; x<=pcfCount; x++){
          for(int y=-pcfCount; y<=pcfCount; y++){
          float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
          
          if(shadowCoords.z > objectNearestLight){
                  total += 1.0;
              }
 
          }
    }
    
    total /= totalTexels;

    float lightFactor = 1.0 - (total * shadowCoords.w);
  
    vec4 blendMapColour = texture(blendMap, pass_textureCoordinates);                                          //check color of blendmap in given coordinates.......
    
    float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);                   //texture1 will have max weight when blend map is black...
    vec2 tiledCoords = pass_textureCoordinates * 80.0;                                                       //tile the texture coordinates.........
    vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;             //calculate texture1........ 
    vec4 rTextureColour = texture(rTexture,tiledCoords) * blendMapColour.r;                                 //calculate texture2...........
    vec4 gTextureColour = texture(gTexture,tiledCoords) * blendMapColour.g;                                 //calculate texture3...........
    vec4 bTextureColour = texture(bTexture,tiledCoords) * blendMapColour.b;                                  //calculate texture4...........

    vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;            //calculate total color at the fragment.........
    vec3 unitVectorToCamera = normalize(toCameraVector);
   
	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0; i<4; i++){
	
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance* distance);
	
	vec3 unitLightVector = normalize(toLightVector[i]);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.0);
	
	
	
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
    totalDiffuse = max(totalDiffuse * lightFactor, 0.4);
      
	out_Color =  vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular,1.0);
	//out_Color = mix(vec4(skyColour,1.0),out_Color,visibility);
        
}